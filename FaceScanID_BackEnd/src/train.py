"""
TRAIN.PY - Vers√£o Final Corrigida
- Corrige problemas com arquivos cascade do OpenCV
- Configura√ß√£o otimizada para detec√ß√£o de faces
- Tratamento robusto de erros
"""

import os
import pickle
import shutil
from deepface import DeepFace
from pathlib import Path
import sys
import numpy as np
from tqdm import tqdm
import tempfile
import cv2

# Configura√ß√£o de caminhos
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.append(str(PROJECT_ROOT))

from config import DIRECTORIES, FILES, DEEPFACE_CONFIG

def verificar_arquivos_cascade():
    """Verifica e corrige os caminhos dos arquivos cascade do OpenCV."""
    try:
        # Verifica se os arquivos cascade existem no local padr√£o
        cascade_path = Path(cv2.__file__).parent / 'data'
        frontalface_path = cascade_path / 'haarcascade_frontalface_default.xml'
        eye_path = cascade_path / 'haarcascade_eye.xml'
        
        if not frontalface_path.exists():
            print(f"‚ö†Ô∏è Arquivo cascade n√£o encontrado: {frontalface_path}")
            # Tenta encontrar em outro local comum
            alt_path = Path(sys.prefix) / 'Lib' / 'site-packages' / 'cv2' / 'data'
            if (alt_path / 'haarcascade_frontalface_default.xml').exists():
                cascade_path = alt_path
                print(f"‚úÖ Arquivos cascade encontrados em: {cascade_path}")
        
        return str(cascade_path / 'haarcascade_frontalface_default.xml')
    except Exception as e:
        print(f"‚ùå Erro ao verificar arquivos cascade: {e}")
        return None

def gerar_representacoes():
    """Gera e salva embeddings faciais com DeepFace."""
    # Verifica arquivos cascade
    cascade_file = verificar_arquivos_cascade()
    if not cascade_file:
        print("‚ùå N√£o foi poss√≠vel encontrar os arquivos necess√°rios para detec√ß√£o facial")
        return False

    # Verifica se o diret√≥rio de imagens existe
    if not DIRECTORIES['faces'].exists():
        print(f"‚ùå Diret√≥rio de imagens n√£o encontrado: {DIRECTORIES['faces']}")
        return False

    # Cria um diret√≥rio tempor√°rio para c√≥pias seguras das imagens
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_dir_path = Path(temp_dir)
        
        # Lista arquivos de imagem v√°lidos e cria c√≥pias com nomes seguros
        arquivos_seguros = []
        for arquivo in DIRECTORIES['faces'].iterdir():
            if arquivo.suffix.lower() in ('.jpg', '.jpeg', '.png'):
                # Cria um nome de arquivo seguro (sem caracteres especiais)
                nome_seguro = f"temp_{len(arquivos_seguros)}{arquivo.suffix}"
                caminho_seguro = temp_dir_path / nome_seguro
                
                # Copia o arquivo para o diret√≥rio tempor√°rio
                shutil.copy2(arquivo, caminho_seguro)
                arquivos_seguros.append({
                    'original': arquivo.name,
                    'temp_path': caminho_seguro
                })

        if not arquivos_seguros:
            print("‚ùå Nenhuma imagem v√°lida encontrada no diret√≥rio de faces")
            return False

        print(f"üîç Encontradas {len(arquivos_seguros)} imagens para processamento")

        todas_reps = []
        processados = 0
        erros = 0

        # Configura√ß√µes do DeepFace otimizadas
        model_name = DEEPFACE_CONFIG.get('model_name', 'VGG-Face')
        detector_backend = 'mtcnn'  # Mais robusto que opencv
        enforce_detection = False  # Permite processar mesmo sem detec√ß√£o
        align = True

        # Processa imagens com barra de progresso
        for arquivo in tqdm(arquivos_seguros, desc="Processando imagens"):
            try:
                # Verifica se a imagem √© v√°lida antes de processar
                img = cv2.imread(str(arquivo['temp_path']))
                if img is None:
                    print(f"‚ö†Ô∏è Imagem inv√°lida: {arquivo['original']}")
                    erros += 1
                    continue

                # Gera representa√ß√£o facial usando o caminho tempor√°rio seguro
                reps = DeepFace.represent(
                    img_path=str(arquivo['temp_path']),
                    model_name=model_name,
                    detector_backend=detector_backend,
                    enforce_detection=enforce_detection,
                    align=align
                )

                if reps:
                    todas_reps.append({
                        "arquivo": arquivo['original'],  # Usa o nome original
                        "representacao": np.array(reps[0]["embedding"])
                    })
                    processados += 1
                else:
                    print(f"‚ö†Ô∏è Nenhuma face detectada em: {arquivo['original']}")
                    erros += 1

            except Exception as e:
                print(f"‚ùå Erro ao processar {arquivo['original']}: {str(e)}")
                erros += 1

        # Salva representa√ß√µes se houve sucesso
        if todas_reps:
            # Garante que o diret√≥rio existe
            FILES['representations'].parent.mkdir(parents=True, exist_ok=True)
            
            # Salva em formato pickle
            with open(FILES['representations'], 'wb') as f:
                pickle.dump(todas_reps, f, protocol=pickle.HIGHEST_PROTOCOL)

            print(f"\n‚úÖ Processamento conclu√≠do com sucesso!")
            print(f"   - Imagens processadas: {processados}")
            print(f"   - Erros encontrados: {erros}")
            print(f"   - Arquivo salvo em: {FILES['representations']}")
            return True
        else:
            print("\n‚ùå Nenhuma representa√ß√£o foi gerada")
            return False

if __name__ == "__main__":
    gerar_representacoes()